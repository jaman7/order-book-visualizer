.editorconfig

root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false

[*.scss]
trim_trailing_whitespace = true

.eslintignore
node_modules
dist
src/main.ts
src/polyfills.ts

.eslintrc.json
{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "env": {
    "es6": true,
    "browser": true,
    "node": true,
    "es2020": true
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "extends": [
    "plugin:@angular-eslint/recommended",
    "eslint:recommended",
    "plugin:storybook/recommended"
  ],
  "rules": {
    "@angular-eslint/directive-selector": [
      "error",
      {
        "type": "attribute",
        "prefix": "app",
        "style": "camelCase"
      }
    ],
    "@angular-eslint/component-selector": [
      "error",
      {
        "type": "element",
        "prefix": "app",
        "style": "kebab-case"
      }
    ],
    "class-methods-use-this": "off",
    "prettier/prettier": [
      "error",
      {
        "endOfLine": "auto"
      }
    ],
    "import/no-extraneous-dependencies": "off",
    "@typescript-eslint/explicit-function-return-type": "error",
    "no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": true,
        "variables": true
      }
    ],
    "import/no-default-export": "error"
  },
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "plugins": [
        "@typescript-eslint",
        "@angular-eslint"
      ],
      "extends": [
        "airbnb-base",
        "airbnb-typescript/base",
        "eslint:recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "prettier"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "ecmaVersion": 2020,
        "sourceType": "module",
        "project": [
          "tsconfig.eslint.json"
        ]
      },
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "import/order": [
          "error",
          {
            "groups": [
              [
                "builtin",
                "external",
                "internal",
                "parent",
                "sibling",
                "index"
              ]
            ],
            "newlines-between": "always",
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            }
          }
        ],
        "import/no-unresolved": "off",
        "import/prefer-default-export": "off",
        "lines-between-class-members": [
          "error",
          "always"
        ],
        "prettier/prettier": "error",
        "class-methods-use-this": "off",
        "valid-typeof": "off",
        "no-console": [
          "error",
          {
            "allow": [
              "warn",
              "error"
            ]
          }
        ],
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "vars": "all",
            "args": "after-used"
          }
        ],
        "prefer-destructuring": [
          "error",
          {
            "object": true,
            "array": true
          }
        ],
        "@typescript-eslint/unbound-method": [
          "error",
          {
            "ignoreStatic": true
          }
        ],
        "max-classes-per-file": [
          "error",
          {
            "ignoreExpressions": true,
            "max": 2
          }
        ],
        "init-declarations": "off",
        "@typescript-eslint/init-declarations": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "no-underscore-dangle": "off",
        "no-use-before-define": [
          "error",
          {
            "functions": true,
            "classes": true
          }
        ],
        "no-undef": "error",
        "no-restricted-syntax": "off"
      }
    },
    {
      "files": [
        "*.html"
      ],
      "plugins": [
        "@angular-eslint/template",
        "prettier"
      ],
      "parser": "@angular-eslint/template-parser",
      "excludedFiles": [
        "*inline-template-*.component.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended",
        "plugin:prettier/recommended"
      ],
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "parser": "angular",
            "endOfLine": "auto",
            "bracketSameLine": false
          }
        ]
      }
    },
    {
      "files": [
        "*.stories.ts"
      ],
      "rules": {
        "import/no-extraneous-dependencies": "off"
      }
    },
    {
      "files": [
        "*.spec.ts"
      ],
      "rules": {
        "import/no-extraneous-dependencies": "off"
      }
    },
    {
      "files": [
        "src/**/*.spec.ts",
        "src/**/*.d.ts"
      ],
      "parserOptions": {
        "project": "./src/tsconfig.spec.json"
      },
      "extends": [
        "plugin:jest/recommended"
      ],
      "plugins": [
        "jest"
      ],
      "env": {
        "jest": true
      },
      "rules": {
        "@typescript-eslint/no-unused-vars": "off"
      }
    },
    {
      "files": [
        "e2e/**/*.e2e-spec.ts",
        "e2e/**/*.po.ts"
      ],
      "parserOptions": {
        "project": "./e2e/tsconfig.json"
      },
      "extends": [
        "plugin:protractor/recommended"
      ],
      "plugins": [
        "protractor"
      ],
      "rules": {
        "import/no-extraneous-dependencies": [
          "error",
          {
            "devDependencies": true
          }
        ]
      }
    }
  ]
}

.lintstagedrc
{
  '{,src/**/}*.{md,json,ts,tsx,js,jsx,css,scss,html,yml}': ['git add']
}

.npmrc
# .npmrc
engine-strict=true

.prettierignore
node_modules
target
package-lock.json
.git

.prettierrc
{
  "tabWidth": 2,
  "useTabs": false,
  "singleQuote": true,
  "semi": true,
  "bracketSpacing": true,
  "arrowParens": "avoid",
  "trailingComma": "es5",
  "bracketSameLine": false,
  "printWidth": 140,
  "endOfLine": "auto",
  "overrides": [
    {
      "files": "*.html",
      "options": {
        "parser": "html"
      }
    },
    {
      "files": "*.component.html",
      "options": {
        "parser": "angular"
      }
    },
    {
      "files": "*.scss",
      "options": {
        "singleQuote": false
      }
    }
  ]
}

.stylelintrc
{
  "extends": [
    "stylelint-config-recommended",
    "stylelint-config-standard-scss"
  ],
  "rules": {
    "at-rule-no-unknown": null,
    "value-keyword-case": [
      "lower",
      {
        "ignoreFunctions": [
          "t",
          "var"
        ]
      }
    ],
    "scss/dollar-variable-pattern": [
      "[a-z][a-zA-Z]+",
      {
        "ignore": "local"
      }
    ],
    "selector-pseudo-element-no-unknown": [
      true,
      {
        "ignorePseudoElements": [
          "ng-deep"
        ]
      }
    ],
    "no-descending-specificity": null,
    "selector-class-pattern": null,
    "scss/no-global-function-names": null,
    "color-no-invalid-hex": true
  }
}

angular.json
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "order-book-visualizer": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "scss"
        },
        "@schematics/angular:application": {
          "strict": true
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/order-book-visualizer",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "aot": true,
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              {
                "glob": "**/*",
                "input": "./node_modules/@ant-design/icons-angular/src/inline-svg/",
                "output": "/assets/"
              }
            ],
            "styles": [
              {
                "input": "node_modules/ng-zorro-antd/ng-zorro-antd.min.css",
                "bundleName": "antd"
              },
              {
                "input": "src/styles.scss",
                "bundleName": "app"
              }
            ],
            "stylePreprocessorOptions": {
              "includePaths": [
                "src/assets/scss"
              ]
            },
            "scripts": [],
            "allowedCommonJsDependencies": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "1MB",
                  "maximumError": "2MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "6kB",
                  "maximumError": "8kB"
                }
              ],
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false,
              "namedChunks": false,
              "extractLicenses": true
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "port": 4200,
            "proxyConfig": "proxy.conf.json"
          },
          "configurations": {
            "production": {
              "buildTarget": "order-book-visualizer:build:production"
            },
            "development": {
              "buildTarget": "order-book-visualizer:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.scss"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "schematicCollections": [
      "@angular-eslint/schematics"
    ],
    "analytics": false
  }
}

jest.config.js
globalThis.ngJest = {
  skipNgcc: true,
  tsconfig: 'tsconfig.spec.json',
};

/** @type {import('@jest/types').Config.InitialOptions} */
module.exports = {
  preset: 'jest-preset-angular',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/setup-jest.ts'],
  transform: {
    '^.+\\.(ts|js|html)$': 'jest-preset-angular',
  },
  transformIgnorePatterns: ['node_modules/(?!.*\\.mjs$)'],
  moduleDirectories: ['node_modules', 'src'],
  moduleNameMapper: {
    '^@app/(.*)$': '<rootDir>/src/app/$1',
    '^@env/(.*)$': '<rootDir>/src/environments/$1',
    '^.+\\.(ts|html)$': 'jest-preset-angular',
    '\\.(scss|css|sass)$': 'identity-obj-proxy',
  },
  moduleFileExtensions: ['ts', 'html', 'js', 'json'],
  fakeTimers: {
    enableGlobally: true,
  },
  collectCoverageFrom: ['src/**/*.{ts,tsx}', '!src/**/*.module.ts', '!src/**/index.ts'],
};

package.json
{
  "name": "order-book-visualizer",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.2.8",
    "@angular/cdk": "^19.2.10",
    "@angular/common": "^19.2.0",
    "@angular/compiler": "^19.2.0",
    "@angular/core": "^19.2.0",
    "@angular/forms": "^19.2.0",
    "@angular/platform-browser": "^19.2.0",
    "@angular/platform-browser-dynamic": "^19.2.0",
    "@angular/router": "^19.2.0",
    "@ngrx/effects": "^19.1.0",
    "@ngrx/entity": "^19.1.0",
    "@ngrx/router-store": "^19.1.0",
    "@ngrx/store": "^19.1.0",
    "@ngrx/store-devtools": "^19.1.0",
    "@ngx-translate/core": "^16.0.4",
    "@ngx-translate/http-loader": "^16.0.1",
    "d3": "^7.9.0",
    "gsap": "^3.12.7",
    "ng-zorro-antd": "^19.2.1",
    "rxjs": "~7.8.1",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-builders/jest": "^19.0.1",
    "@angular-devkit/build-angular": "^19.2.9",
    "@angular-eslint/eslint-plugin": "^19.3.0",
    "@angular-eslint/eslint-plugin-template": "^19.3.0",
    "@angular-eslint/schematics": "^19.3.0",
    "@angular-eslint/template-parser": "^19.3.0",
    "@angular/cli": "^19.2.9",
    "@angular/compiler-cli": "^19.2.0",
    "@schematics/angular": "^19.2.9",
    "@types/d3": "^7.4.3",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.14.1",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "eslint": "^8.57.1",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-airbnb-typescript": "^18.0.0",
    "eslint-config-prettier": "^10.1.2",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jest": "^28.11.0",
    "eslint-plugin-prettier": "^5.2.6",
    "eslint-plugin-protractor": "^2.1.1",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "jest-preset-angular": "^14.5.5",
    "lint-staged": "^15.5.1",
    "postcss": "^8.5.3",
    "postcss-scss": "^4.0.9",
    "prettier": "^3.5.3",
    "prettier-eslint": "^16.4.1",
    "stylelint": "^16.19.0",
    "stylelint-config-recommended": "^16.0.0",
    "stylelint-config-standard-scss": "^14.0.0",
    "ts-jest": "^29.3.2",
    "typescript": "~5.7.2"
  },
  "recommendations": [
    "esbenp.prettier-vscode",
    "dbaeumer.vscode-eslint",
    "stylelint.vscode-stylelint"
  ],
  "browserslist": [
    "last 5 Chrome version",
    "last 15 Firefox version",
    "last 4 Edge major versions",
    "last 4 Safari major versions",
    "last 2 iOS major versions",
    "Firefox ESR",
    "not ios_saf 15.2-15.3",
    "not safari 15.2-15.3"
  ]
}

proxy.conf.json
{
  "/api/bigxyt": {
    "target": "https://big-xyt.com",
    "secure": true,
    "changeOrigin": true,
    "pathRewrite": {
      "^/api/bigxyt": ""
    }
  }
}

setup-jest.ts
import { setupZoneTestEnv } from 'jest-preset-angular/setup-env/zone';
setupZoneTestEnv();

tsconfig.app.json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": [
      "node"
    ],
    "typeRoots": [
      "node_modules/@types"
    ]
  },
  "files": [
    "src/main.ts",
    "src/polyfills.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

tsconfig.eslint.json
{
  "extends": "./tsconfig.json",
  "include": [
    // adjust "includes" to what makes sense for you and your project
    "src/**/*.ts",
    "e2e/**/*.ts"
  ]
}

tsconfig.json
{
  "compileOnSave": false,
  "compilerOptions": {
    "types": [
      "node",
      "jest"
    ],
    "baseUrl": "./src",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "importHelpers": true,
    "skipLibCheck": true,
    "target": "ES2022",
    "module": "ESNext",
    "noImplicitAny": true,
    "useDefineForClassFields": false,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "allowJs": true,
    "lib": [
      "ES2022",
      "dom"
    ],
    "paths": {
      "@app/*": [
        "app/*"
      ],
      "@env/*": [
        "environments/*"
      ],
      "@assets/*": [
        "src/assets/*"
      ],
      "@scss/*": [
        "assets/scss/*"
      ]
    }
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true,
    "fullTemplateTypeCheck": true
  },
  "exclude": [
    "node_modules",
    "dist"
  ]
}

tsconfig.spec.json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "node",
      "jest",
      "@testing-library/jest-dom",
    ],
  },
  "files": [
    "src/setup-jest.ts",
    "src/polyfills.ts"
  ],
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}

src\index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>OrderBookVisualizer</title>
    <base href="/" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta http-equiv="expires" content="3600" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;0,900;1,400;1,500;1,700;1,900&display=swap"
      rel="stylesheet"
    />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet" />
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>

src\main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));

src\polyfills.ts
import 'zone.js'; // Included with Angular CLI.

src\styles.scss
/* You can add global styles to this file, and also import other style files */
@use "sass:math";
@import "./assets/scss/reset";
@import "./assets/scss/variables";
@import "./assets/scss/layout";

src\app\app.component.html
<router-outlet />

src\app\app.component.spec.ts
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'order-book-visualizer2' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('order-book-visualizer2');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, order-book-visualizer2');
  });
});

src\app\app.component.ts
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent {
  title = 'order-book-visualizer2';
}

src\app\app.config.ts
import { ApplicationConfig, importProvidersFrom, provideZoneChangeDetection } from '@angular/core';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { CoreModule } from './core';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideAnimationsAsync(),
    importProvidersFrom(CoreModule),
    provideRouter(routes),
  ],
};

src\app\app.routes.ts
import { Routes } from '@angular/router';

export const routes: Routes = [
  {
    path: 'order-book',
    loadComponent: () => import('./components/order-book/order-book-page/order-book-page.component').then(m => m.OrderBookPageComponent),
  },
  {
    path: '',
    redirectTo: 'order-book',
    pathMatch: 'full',
  },
];

src\app\components\order-book\order-book.models.ts
export interface Order {
  price: number;
  volume: number;
}

export interface OrderBookSnapshot {
  bids: Order[];
  asks: Order[];
  time: number;
}

src\app\components\order-book\order-book.service.ts
import { Injectable } from '@angular/core';
import { map, Observable } from 'rxjs';
import { HttpService } from '@app/core/http/http.service';
import { transformRawSnapshot } from './order-book.utils';

@Injectable({ providedIn: 'root' })
export class OrderBookService extends HttpService {
  getOrderBook(): Observable<any> {
    return this.response<string>('get', '/api/bigxyt/assets/files/sample.json', { responseType: 'text' }, true).pipe(
      map((response: string) =>
        response
          .split('\n')
          .filter((el: string) => el.trim())
          .map((line: string) => JSON.parse(line))
      )
    );
  }
}

src\app\components\order-book\order-book.utils.ts
import { OrderBookSnapshot } from './order-book.models';

export function transformRawSnapshot(snapshot: any): OrderBookSnapshot {
  const bids = Array.from({ length: 10 }, (_, i) => ({
    price: snapshot[`Bid${i + 1}`],
    volume: snapshot[`Bid${i + 1}Size`],
  }));

  const asks = Array.from({ length: 10 }, (_, i) => ({
    price: snapshot[`Ask${i + 1}`],
    volume: snapshot[`Ask${i + 1}Size`],
  }));

  return {
    time: new Date(`1970-01-01T${snapshot.Time}Z`).getTime(),
    bids,
    asks,
  };
}

src\app\components\order-book\order-book-chart\order-book-chart.component.html
<div #chart class="order-book-chart"></div>

src\app\components\order-book\order-book-chart\order-book-chart.component.scss
.order-book-chart {
  width: 100%;
  height: 500px;
  background-color: var(--color-light-grey);
  border-radius: 8px;
  padding: 1rem;

  svg {
    font-family: Roboto, sans-serif;
    font-size: 12px;
    color: var(--color-white);
  }

  .axis-price text {
    fill: var(--color-grey);
  }

  rect {
    transition: all 0.3s ease-in-out;
  }

  .bid-bar {
    fill: var(--color-grey);
  }

  .ask-bar {
    fill: var(--color-red);
  }

  .bid-bar:hover,
  .ask-bar:hover {
    opacity: 0.7;
  }

  @media (width <= 1024px) {
    height: 300px;

    svg {
      font-size: 10px;
    }
  }
}

src\app\components\order-book\order-book-chart\order-book-chart.component.ts
import { Component, ElementRef, Input, OnChanges, ViewChild } from '@angular/core';
import * as d3 from 'd3';
import { Order, OrderBookSnapshot } from '../order-book.models';
import { NzToolTipModule } from 'ng-zorro-antd/tooltip';

@Component({
  selector: 'app-order-book-chart',
  standalone: true,
  imports: [NzToolTipModule],
  templateUrl: './order-book-chart.component.html',
  styleUrls: ['./order-book-chart.component.scss'],
})
export class OrderBookChartComponent implements OnChanges {
  @Input() data: OrderBookSnapshot[] | null = null;
  @ViewChild('chart', { static: true }) chartRef!: ElementRef<HTMLDivElement>;

  private svg: d3.Selection<SVGGElement, unknown, null, undefined> | null = null;
  private x: d3.ScaleLinear<number, number> | null = null;
  private y: d3.ScaleBand<string> | null = null;

  ngOnChanges(): void {
    if (this.data && this.data.length > 0) {
      this.drawChart(this.data[0]);
    }
  }

  private drawChart(snapshot: OrderBookSnapshot): void {
    const element = this.chartRef.nativeElement;
    const margin = { top: 20, right: 30, bottom: 40, left: 80 };
    const width = element.clientWidth || 600;
    const height = element.clientHeight || 400;
    const chartWidth = width - margin.left - margin.right;
    const chartHeight = height - margin.top - margin.bottom;

    d3.select(element).selectAll('*').remove();
    const svgContainer = d3.select(element).append('svg').attr('width', width).attr('height', height);
    this.svg = svgContainer.append('g').attr('transform', `translate(${margin.left},${margin.top})`);

    const tooltipDiv = d3
      .select('body') // zamiast element
      .append('div')
      .attr('class', 'custom-tooltip')
      .style('position', 'fixed')
      .style('z-index', '1000')
      .style('font-size', '12px')
      .style('background', '#333')
      .style('color', '#fff')
      .style('padding', '5px 10px')
      .style('border-radius', '4px')
      .style('pointer-events', 'none')
      .style('opacity', 0);

    const bids = [...snapshot.bids].sort((a, b) => b.price - a.price);
    const asks = [...snapshot.asks].sort((a, b) => a.price - b.price);
    const allPrices = [...bids.map(b => b.price), ...asks.map(a => a.price)].map(p => p.toFixed(4));

    this.y = d3.scaleBand<string>().domain(allPrices).range([0, chartHeight]).padding(0.1);
    this.x = d3
      .scaleLinear()
      .domain([-d3.max([...bids, ...asks], d => d.volume)!, d3.max([...bids, ...asks], d => d.volume)!])
      .range([0, chartWidth]);

    const t = this.svg.transition().duration(500);

    const updateBars = (data: Order[], className: string, color: string, isBid: boolean) => {
      const bars = this.svg!.selectAll<SVGRectElement, Order>(`.${className}`).data(data, d => d.price.toFixed(4));

      const barsEnter = bars
        .enter()
        .append('rect')
        .attr('class', className)
        .attr('x', d => this.x!(isBid ? -d.volume : 0))
        .attr('y', d => this.y!(d.price.toFixed(4))!)
        .attr('height', this.y!.bandwidth())
        .attr('width', 0)
        .attr('fill', color)
        .attr('stroke', 'black')
        .attr('stroke-width', 0.5)
        .on('mouseover', (event, d) => {
          const yPos = this.y!(d.price.toFixed(4))!;
          const xPos = this.x!(isBid ? -d.volume : d.volume);
          tooltipDiv.transition().duration(200).style('opacity', 0.9);
          tooltipDiv
            .html(`<strong>Price:</strong> ${d.price}<br><strong>Volume:</strong> ${d.volume}`)
            .style('left', `${event.clientX + 10}px`)
            .style('top', `${event.clientY - 30}px`);
        })
        .on('mouseout', function () {
          tooltipDiv.transition().duration(200).style('opacity', 0);
        });

      bars
        .merge(barsEnter)
        .transition(t)
        .attr('x', d => this.x!(isBid ? -d.volume : 0))
        .attr('y', d => this.y!(d.price.toFixed(4))!)
        .attr('height', this.y!.bandwidth())
        .attr('width', d => Math.abs(this.x!(d.volume) - this.x!(0)));

      bars.exit().transition(t).attr('width', 0).remove();

      const bestPrice = isBid ? d3.max(data, d => d.price) : d3.min(data, d => d.price);
      this.svg!.selectAll(`.${className}`)
        .filter((d: Order) => d.price === bestPrice)
        .attr('stroke', '#000')
        .attr('stroke-width', 1.5);
    };

    updateBars(bids, 'bid-bar', '#007700', true);
    updateBars(asks, 'ask-bar', '#cc0000', false);

    this.svg!.selectAll('.axis-price').remove();
    this.svg!.append('g')
      .attr('class', 'axis-price')
      .call(d3.axisLeft(this.y).tickSize(0))
      .selectAll('text')
      .attr('text-anchor', 'end')
      .style('fill', '#999');

    const xAxis = d3.axisBottom(this.x!).ticks(5).tickFormat(d3.format('~s'));

    this.svg!.selectAll('.axis-x').remove();
    this.svg!.append('g')
      .attr('class', 'axis-x')
      .attr('transform', `translate(0,${chartHeight})`)
      .call(xAxis)
      .selectAll('text')
      .style('fill', '#666');

    this.svg!.append('line')
      .attr('x1', this.x!(0))
      .attr('x2', this.x!(0))
      .attr('y1', 0)
      .attr('y2', chartHeight)
      .attr('stroke', '#ccc')
      .attr('stroke-dasharray', '4 2');

    const legend = svgContainer
      .append('g')
      .attr('class', 'legend')
      .attr('transform', `translate(${width - margin.right - 120},${margin.top})`);

    legend.append('rect').attr('x', 0).attr('y', 0).attr('width', 15).attr('height', 15).attr('fill', '#cc0000');

    legend.append('text').attr('x', 20).attr('y', 12).text('Asks').style('font-size', '12px');

    legend.append('rect').attr('x', 0).attr('y', 20).attr('width', 15).attr('height', 15).attr('fill', '#007700');

    legend.append('text').attr('x', 20).attr('y', 32).text('Bids').style('font-size', '12px');
  }
}

src\app\components\order-book\order-book-page\order-book-page.component.html
<div class="layout" *ngIf="selectedSnapshot() as snapshot">
  <div class="layout__controls">
    @for (btn of controls; track btn.icon) {
      <app-button
        [icon]="btn.icon"
        [tooltipTitle]="btn.tooltip"
        tooltipPlacement="bottom"
        tooltipClassName="tooltip-btn-bottom"
        [isRound]="true"
        [isActive]="resolveActive(btn.active)"
        (btnClick)="btn.action()"
      ></app-button>
    }
  </div>

  <div class="layout__top-info">
    <div class="progress" *ngIf="replayRemaining() > 0">
      <svg viewBox="0 0 100 100" class="progress__circle">
        <circle cx="50" cy="50" r="45" class="progress__circle--background" />
        <circle
          cx="50"
          cy="50"
          r="45"
          class="progress__circle--foreground"
          stroke-dasharray="282.743"
          [attr.stroke-dashoffset]="dashOffset()"
        />
      </svg>
      <span class="progress__countdown">{{ replayRemaining() / 1000 | number: '1.1-1' }}s</span>
    </div>
  </div>

  <div class="layout__slider">
    <input
      type="range"
      [min]="0"
      [max]="snapshots().length - 1"
      [value]="selectedIndex()"
      (input)="onSliderChange($event)"
      style="width: 100%"
    />
  </div>

  <div class="layout__metrics">
    <p><strong>Time:</strong> {{ snapshot.time | date: 'HH:mm:ss' }}</p>
    <span><strong>Spread:</strong> {{ spread()?.toFixed(4) }}</span>
    <span><strong>Total Bid Vol:</strong> {{ volumeStats()?.bid }}</span>
    <span><strong>Total Ask Vol:</strong> {{ volumeStats()?.ask }}</span>
  </div>

  <div class="layout__chart">
    <app-order-book-chart [data]="[snapshot]" />
  </div>
</div>

src\app\components\order-book\order-book-page\order-book-page.component.scss
.layout {
  display: grid;
  grid-template-areas:
    "controls progress"
    "info    progress"
    "slider  slider"
    "metrics metrics"
    "chart   chart";
  grid-template-columns: 1fr auto;
  grid-gap: 1rem;
  padding: 1rem;

  &__controls {
    grid-area: controls;
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  &__top-info {
    grid-area: info;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  &__slider {
    grid-area: slider;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    font-size: 0.95rem;
    color: var(--color-primary);
  }

  &__metrics {
    grid-area: metrics;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    font-size: 0.95rem;
    color: var(--color-primary);
  }

  &__chart {
    grid-area: chart;
  }

  .progress {
    grid-area: progress;
    width: 60px;
    height: 60px;
    position: relative;

    &__circle {
      width: 100%;
      height: 100%;
      transform: rotate(-90deg);

      circle {
        fill: none;
        stroke-width: 8;
      }

      &--background {
        stroke: var(--color-light-grey);
      }

      &--foreground {
        stroke: var(--color-blue);
        stroke-linecap: round;
        transition: stroke-dashoffset 0.1s linear;
      }
    }

    &__countdown {
      font-size: 1rem;
      color: var(--color-orange);
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

src\app\components\order-book\order-book-page\order-book-page.component.ts
import { Component, computed, inject, Signal, signal } from '@angular/core';
import { OrderBookService } from '../order-book.service';
import { OrderBookChartComponent } from '../order-book-chart/order-book-chart.component';
import { CommonModule, DatePipe, NgIf } from '@angular/common';
import { transformRawSnapshot } from '../order-book.utils';
import { OrderBookSnapshot } from '../order-book.models';
import gsap from 'gsap';
import { ButtonComponent } from '@app/shared/components/button/button.component';

@Component({
  selector: 'app-order-book-page',
  standalone: true,
  imports: [CommonModule, NgIf, DatePipe, ButtonComponent, OrderBookChartComponent],
  templateUrl: './order-book-page.component.html',
  styleUrls: ['./order-book-page.component.scss'],
})
export class OrderBookPageComponent {
  private orderBookService = inject(OrderBookService);
  private timeline: gsap.core.Timeline | null = null;
  private replayInterval: any = null;
  private currentStepDuration = 1000; // ms

  readonly snapshots = signal<OrderBookSnapshot[]>([]);
  readonly selectedIndex = signal(0);
  readonly replayRemaining = signal(0);

  readonly dashArray = 2 * Math.PI * 45; // obwód koła (r=45)
  readonly dashOffset = computed(() => ((this.replayRemaining() / this.currentStepDuration) * this.dashArray).toFixed(2));

  readonly selectedSnapshot = computed(() => {
    const list = this.snapshots();
    const index = this.selectedIndex();
    return list.length > 0 ? list[index] : null;
  });

  readonly controls = [
    {
      icon: 'step-backward',
      action: () => this.prevSnapshot(),
      tooltip: 'common.buttons.prev',
      active: signal(false),
    },
    {
      icon: 'step-forward',
      action: () => this.nextSnapshot(),
      tooltip: 'common.buttons.next',
      active: signal(false),
    },
    {
      icon: 'caret-right',
      action: () => this.replay(),
      tooltip: 'common.buttons.replay',
      active: computed(() => this.replayRemaining() > 0),
    },
    {
      icon: 'stop',
      action: () => this.stopReplay(),
      tooltip: 'common.buttons.stop',
      active: computed(() => this.replayRemaining() === 0),
    },
  ];

  constructor() {
    this.orderBookService.getOrderBook().subscribe(raw => {
      const parsed = raw?.map(transformRawSnapshot) ?? [];
      this.snapshots.set(parsed);
    });
    console.log(this.controls);
  }

  nextSnapshot(): void {
    const next = this.selectedIndex() + 1;
    if (next < this.snapshots().length) this.selectedIndex.set(next);
  }

  prevSnapshot(): void {
    const prev = this.selectedIndex() - 1;
    if (prev >= 0) this.selectedIndex.set(prev);
  }

  replay(): void {
    const snapshots = this.snapshots();
    if (snapshots.length < 2) return;

    this.stopReplay(); // zatrzymaj poprzedni replay

    let i = 0;
    const nextStep = () => {
      i = (i + 1) % snapshots.length;
      this.selectedIndex.set(i);
      this.currentStepDuration = 30_000;
      const start = Date.now();

      this.replayRemaining.set(this.currentStepDuration);
      clearInterval(this.replayInterval);

      this.replayInterval = setInterval(() => {
        const elapsed = Date.now() - start;
        const remaining = Math.max(this.currentStepDuration - elapsed, 0);
        this.replayRemaining.set(remaining);

        if (remaining === 0) {
          clearInterval(this.replayInterval);
          nextStep(); // przejście do następnego snapshotu
        }
      }, 100);
    };

    nextStep();
  }

  stopReplay(): void {
    this.timeline?.kill();
    this.timeline = null;
    clearInterval(this.replayInterval);
    this.replayRemaining.set(0);
  }

  onSliderChange(event: Event): void {
    const index = +(event.target as HTMLInputElement).value;
    this.selectedIndex.set(index);
  }

  readonly spread = computed(() => {
    const s = this.selectedSnapshot();
    if (!s) return null;
    return (s.asks[0]?.price ?? 0) - (s.bids[0]?.price ?? 0);
  });

  readonly volumeStats = computed(() => {
    const s = this.selectedSnapshot();
    if (!s) return null;
    return {
      bid: s.bids.reduce((sum, b) => sum + b.volume, 0),
      ask: s.asks.reduce((sum, a) => sum + a.volume, 0),
    };
  });

  resolveActive(active: boolean | Signal<boolean>): boolean {
    return typeof active === 'function' ? active() : active;
  }
}

src\app\core\core.module.ts
import { ErrorInterceptor } from './http/error.interceptor';
import { HttpClientModule } from './http/httpclient.module';
import { TranslateCoreModule } from './translate-core.module';
import { CommonModule } from '@angular/common';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injector, NgModule, Optional, SkipSelf } from '@angular/core';

@NgModule({
  imports: [CommonModule, HttpClientModule, TranslateCoreModule],
  declarations: [],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: ErrorInterceptor,
      multi: true,
    },
  ],
  exports: [HttpClientModule],
})
export class CoreModule {
  constructor(
    private injector: Injector,
    @Optional()
    @SkipSelf()
    parentModule: CoreModule
  ) {
    if (parentModule) {
      throw new Error('CoreModule is already loaded.');
    }
  }
}

src\app\core\core.state.ts
import { LanguageType } from './language/language.models';
import { languageReducer } from './language/store';
import { debugReducer, initStateFromLocalStorage } from '@app/core/meta-reducers/init-state-storage.reducer';
import { environment as env } from '@env/environment';
import { routerReducer, RouterReducerState, SerializedRouterStateSnapshot } from '@ngrx/router-store';
import { ActionReducerMap, createFeatureSelector, MetaReducer } from '@ngrx/store';

export interface AppState {
  language: LanguageType;
  router: RouterReducerState<SerializedRouterStateSnapshot>;
}

export const reducers: ActionReducerMap<AppState> = {
  language: languageReducer,
  router: routerReducer,
};

export const metaReducers: MetaReducer<AppState>[] = [initStateFromLocalStorage];
if (!env.production) metaReducers.unshift(debugReducer);
export const selectLanguageState = createFeatureSelector<LanguageType>('language');
export const selectRouterState = createFeatureSelector<RouterReducerState<SerializedRouterStateSnapshot>>('router');
export const APP_PREFIX = 'test-APP';

src\app\core\index.ts
import * as fromRoot from './core.state';

export * from './core.module';
export * from './core.state';
export * from './http/http.service';
export * from './language/store/language.actions';
export * from './language/language.service';
export * from './language/translate.resolver';
export { fromRoot };

src\app\core\translate-core.module.ts
import { metaReducers, reducers } from './core.state';
import { HttpClientModule } from './http/httpclient.module';
import { MissingTranslation } from './language/language-missing-translation.handler';
import { LanguageService } from './language/language.service';
import { LanguageEffects } from './language/store';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { APP_INITIALIZER, NgModule } from '@angular/core';
import buildEnvironment from '@env/build-environment';
import { EffectsModule } from '@ngrx/effects';
import { StoreRouterConnectingModule } from '@ngrx/router-store';
import { StoreModule } from '@ngrx/store';
import { StoreDevtoolsModule } from '@ngrx/store-devtools';
import { MissingTranslationHandler, TranslateLoader, TranslateModule } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';

export function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {
  return new TranslateHttpLoader(
    http,
    'assets/i18Local/',
    `.json?v=${buildEnvironment?.buildTimestamp ? new Date(buildEnvironment.buildTimestamp ?? null).getTime() : ''}`
  );
}

export function initializeLanguageService(languageService: LanguageService) {
  return (): void => {
    languageService.init();
  };
}

@NgModule({
  imports: [
    CommonModule,
    HttpClientModule,
    StoreRouterConnectingModule.forRoot(),
    StoreModule.forRoot(reducers, { metaReducers }),
    StoreDevtoolsModule.instrument({
      maxAge: 10,
    }),
    EffectsModule.forRoot([LanguageEffects]),
    TranslateModule.forRoot({
      missingTranslationHandler: { provide: MissingTranslationHandler, useClass: MissingTranslation },
      loader: {
        provide: TranslateLoader,
        useFactory: HttpLoaderFactory,
        deps: [HttpClient],
      },
    }),
  ],
  declarations: [],
  providers: [
    LanguageService,
    {
      provide: APP_INITIALIZER,
      useFactory: initializeLanguageService,
      deps: [LanguageService],
      multi: true,
    },
  ],
  exports: [TranslateModule, HttpClientModule],
})
export class TranslateCoreModule {}

src\app\core\http\error.interceptor.ts
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Injectable()
export class ErrorInterceptor implements HttpInterceptor {
  intercept<T>(req: HttpRequest<T>, next: HttpHandler): Observable<HttpEvent<T>> {
    return next.handle(req).pipe(
      catchError(error => {
        console.error('Global HTTP Error:', error);
        return throwError(() => new Error('HTTP Request failed.'));
      })
    );
  }
}

src\app\core\http\http.model.ts
import { HttpHeaders } from '@angular/common/http';

export type HttpObserveType = 'body' | 'events' | 'response';

export interface IParams {
  [param: string]: number | number[] | string | string[] | boolean | boolean[];
}

export class HttpOptions {
  headers?: HttpHeaders | { [header: string]: string | string[] };

  observe?: 'body';

  params?: IParams;

  reportProgress?: boolean;

  responseType?: 'json';

  withCredentials?: boolean;

  forceRefresh?: boolean;

  retries?: number;

  useFullUrl?: boolean;

  timeout?: number;
}

export class HttpRequestOptions<T = unknown> {
  body?: T;

  headers?: HttpHeaders | { [header: string]: string | string[] };

  params?: {
    [param: string]: string | string[];
  };

  observe?: HttpObserveType;

  reportProgress?: boolean;

  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';

  withCredentials?: boolean;
}

src\app\core\http\http.service.ts
import { HttpOptions, HttpRequestOptions, IParams } from './http.model';
import { toHttpParams } from './http.utils';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment as env } from '@env/environment';
import { Observable, throwError } from 'rxjs';

@Injectable()
export abstract class HttpService {
  constructor(public http: HttpClient) {}

  private createUrl(url: string, useFullUrl: boolean): string {
    return useFullUrl ? url : env.SERVER_API_URL + url;
  }

  protected get<T>(url: string, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {
    const finalUrl = this.createUrl(url, useFullUrl);
    return this.http.get<T>(finalUrl, {
      ...options,
      params: toHttpParams(options.params as IParams),
    });
  }

  protected post<T>(url: string, data: T, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {
    const finalUrl = this.createUrl(url, useFullUrl);
    return this.http.post<T>(finalUrl, data, {
      ...options,
      params: toHttpParams(options.params as IParams),
    });
  }

  protected patch<T>(url: string, data: T, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {
    const finalUrl = this.createUrl(url, useFullUrl);
    return this.http.patch<T>(finalUrl, data, {
      ...options,
      params: toHttpParams(options.params as IParams),
    });
  }

  protected put<T>(url: string, data: T, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {
    const finalUrl = this.createUrl(url, useFullUrl);
    return this.http.put<T>(finalUrl, data, {
      ...options,
      params: toHttpParams(options.params as IParams),
    });
  }

  protected delete<T>(url: string, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {
    const finalUrl = this.createUrl(url, useFullUrl);
    return this.http.delete<T>(finalUrl, {
      ...options,
      params: toHttpParams(options.params as IParams),
    });
  }

  protected response<T>(method: string, url: string, options: HttpRequestOptions = {}, useFullUrl: boolean = false): Observable<T> {
    const finalUrl = this.createUrl(url, useFullUrl);

    return this.http.request(method, finalUrl, {
      ...options,
      body: options.body,
      params: toHttpParams(options.params as IParams),
    });
  }

  private handleError(error: HttpErrorResponse): Observable<never> {
    console.error('API call error:', error);
    return throwError('An error occurred while communicating with the server.');
  }
}

src\app\core\http\http.utils.ts
import { IParams } from './http.model';
import { HttpParams } from '@angular/common/http';

export function preparedHttpParamsValue<T>(value: T): string {
  if (value instanceof String) return value.toString();
  if (Array.isArray(value)) return value.join('&');
  return value.toString();
}

export function getSize<T>(collection: T): number {
  if (Array.isArray(collection)) return collection.length;
  if (typeof collection === 'object' && collection !== null) return Object.keys(collection).length;
  return 0;
}

export function toHttpParams(data: IParams): HttpParams {
  if (!data) return new HttpParams();
  return Object.entries(data)
    .filter(([, value]) => value && (getSize(value) > 0 || !Array.isArray(value)))
    .reduce((params, [key, value]) => params.set(key, preparedHttpParamsValue(value)), new HttpParams());
}

src\app\core\http\httpclient.module.ts
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
import { NgModule } from '@angular/core';

@NgModule({
  providers: [provideHttpClient(withInterceptorsFromDi())],
})
export class HttpClientModule {}

src\app\core\language\language-missing-translation.handler.ts
import { MissingTranslationHandler, MissingTranslationHandlerParams } from '@ngx-translate/core';

export class MissingTranslation implements MissingTranslationHandler {
  handle(params: MissingTranslationHandlerParams): string {
    const [key] = params.key.split('.');
    return key === 'default' ? '' : params.key;
  }
}

src\app\core\language\language.config.ts
export const DEFAULT_LANGUAGE = 'en';
export const INITIAL_PARTIALS = ['menu'];

src\app\core\language\language.models.ts
export interface LanguageState {
  key: string;
}

export type LanguageType = 'pl' | 'en';

src\app\core\language\language.service.ts
import { AppState, selectLanguageState } from '../core.state';
import { DEFAULT_LANGUAGE, INITIAL_PARTIALS } from './language.config';
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import buildEnvironment from '@env/build-environment';
import { Store, select } from '@ngrx/store';
import { TranslateService } from '@ngx-translate/core';
import { Observable, forkJoin, Subscription, of, lastValueFrom } from 'rxjs';
import { catchError, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';

@Injectable()
export class LanguageService {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private translations: { [key: string]: any } = {};

  private downloadedPartials = new Set<string>();

  private initialPartials = new Set<string>(INITIAL_PARTIALS);

  constructor(
    private translate: TranslateService,
    private store: Store<AppState>,
    private http: HttpClient
  ) {}

  setTranslateLanguage$: Observable<string> = this.store.pipe(
    select(selectLanguageState),
    distinctUntilChanged(),
    filter(Boolean),
    tap(language => {
      this.translate.use(language || DEFAULT_LANGUAGE);
      this.loadTranslations([...this.initialPartials]);
    })
  );

  loadTranslations(partials: string[] = []): Promise<boolean> {
    if (!partials.length) return Promise.resolve(true);
    return lastValueFrom(
      forkJoin(partials.map(partial => this.fetchTranslation(partial))).pipe(
        map(() => true),
        catchError(() => of(true))
      )
    );
  }

  private fetchTranslation<T>(partial: string, lang: string = this.translate.currentLang): Observable<T> {
    if (this.downloadedPartials.has(partial)) return of(null);
    this.downloadedPartials.add(partial);
    const buildTimestamp = new Date(buildEnvironment.buildTimestamp).getTime();
    return this.http.get<T>(`assets/i18Local/${lang}/${partial}.json?v=${buildTimestamp}`).pipe(
      tap(response => {
        const translations = {
          ...this.translate.translations[lang],
          ...this.translations[lang],
          ...response,
        };
        this.translations[lang] = translations;
        this.translate.setTranslation(lang, translations);
      }),
      catchError(error => {
        console.error(`Failed to load partial ${partial}:`, error);
        return of(null);
      })
    );
  }

  init(): Subscription {
    return this.setTranslateLanguage$.subscribe();
  }
}

src\app\core\language\translate.resolver.ts
import { LanguageService } from './language.service';
import { CoreModule } from '../core.module';
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot } from '@angular/router';

@Injectable({
  providedIn: CoreModule,
})
export class TranslateResolver {
  constructor(private languageService: LanguageService) {}

  private extractTranslatePartials(route: ActivatedRouteSnapshot): string[] {
    const i18n = route.data.i18Local || [];
    return Array.isArray(i18n) ? i18n : [i18n];
  }

  resolve(route: ActivatedRouteSnapshot): Promise<boolean> {
    const i18nPartials = this.extractTranslatePartials(route);
    return this.languageService.loadTranslations(i18nPartials);
  }
}

src\app\core\language\store\index.ts
export * from './language.actions';
export * from './language.effects';
export * from './language.reducer';

src\app\core\language\store\language.actions.ts
import { LanguageType } from '../language.models';
import { Action } from '@ngrx/store';

export enum LanguageActionTypes {
  CHANGE_LANGUAGE = '[Language] Change Language',
}

export class ActionLanguageChange implements Action {
  readonly type = LanguageActionTypes.CHANGE_LANGUAGE;

  constructor(public payload: LanguageType) {}
}

export type LanguageActions = ActionLanguageChange;

src\app\core\language\store\language.effects.ts
import { ActionLanguageChange, LanguageActionTypes } from './language.actions';
import { Injectable } from '@angular/core';
import { APP_PREFIX } from '@app/core/core.state';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { map } from 'rxjs/operators';

@Injectable()
export class LanguageEffects {
  constructor(private actions$: Actions<ActionLanguageChange>) {}

  changeLanguage$ = createEffect(
    () =>
      this.actions$.pipe(
        ofType(LanguageActionTypes.CHANGE_LANGUAGE),
        map(action => {
          localStorage.setItem(`${APP_PREFIX}${'LANGUAGE'}`, JSON.stringify(action.payload));
        })
      ),
    { dispatch: false }
  );
}

src\app\core\language\store\language.reducer.ts
import { LanguageType } from '../language.models';
import { LanguageActions, LanguageActionTypes } from './language.actions';

export const languageFeatureKey = 'language';
export const initialState: LanguageType = 'en';

// eslint-disable-next-line @typescript-eslint/default-param-last
export function languageReducer(state: LanguageType = initialState, action: LanguageActions): LanguageType {
  switch (action.type) {
    case LanguageActionTypes.CHANGE_LANGUAGE:
      return action.payload;
    default:
      return state;
  }
}

src\app\core\meta-reducers\init-state-storage.reducer.ts
import { APP_PREFIX, AppState } from '../core.state';
import { AbstractStorageService, SessionStorageService } from '../session-storage/session-storage.service';
import { safelyParseJSON, toCamelCase } from '@app/shared/utils/utils';
import { ActionReducer, INIT, UPDATE } from '@ngrx/store';

const storageService: AbstractStorageService = new SessionStorageService();

export function getStateKeys(storageKey: string): string[] {
  return storageKey?.replace(APP_PREFIX, '')?.toLowerCase()?.split('.')?.map(toCamelCase) ?? [];
}

function updateNestedState<T extends Record<string, T>>(state: T, keys: string[], value: T): T {
  return keys.reduceRight((acc, key, index) => {
    if (index === keys.length - 1) return { ...state, [key]: value };
    return { ...state, [key]: { ...(state[key] || {}), ...acc } };
  }, {} as T);
}

export function loadInitialState<T>(): Record<string, T> {
  return Object.keys(sessionStorage).reduce((state: T, storageKey: string) => {
    if (!storageKey.startsWith(APP_PREFIX)) return state;
    const storedItem = storageService.getItem(storageKey);
    if (!storedItem) return state;
    const parsedItem = safelyParseJSON(storedItem);
    if (parsedItem === null) return state;
    const stateKeys = getStateKeys(storageKey);
    return updateNestedState(state, stateKeys, parsedItem);
  }, {});
}

export function initStateFromLocalStorage(reducer: ActionReducer<AppState>): ActionReducer<AppState> {
  return (state, action) => {
    const newState = reducer(state, action);
    if ([INIT.toString(), UPDATE.toString()].includes(action.type)) {
      const loadedState = loadInitialState();
      return { ...newState, ...loadedState };
    }
    return newState;
  };
}

export function debugReducer(reducer: ActionReducer<AppState>): ActionReducer<AppState> {
  return (state, action) => reducer(state, action);
}

src\app\core\session-storage\session-storage.service.ts
export abstract class AbstractStorageService {
  abstract getItem(key: string): string | null;

  abstract setItem(key: string, value: string): void;

  abstract removeItem(key: string): void;

  abstract clear(): void;
}

export class SessionStorageService extends AbstractStorageService {
  getItem(key: string): string | null {
    return sessionStorage.getItem(key);
  }

  setItem(key: string, value: string): void {
    sessionStorage.setItem(key, value);
  }

  removeItem(key: string): void {
    sessionStorage.removeItem(key);
  }

  clear(): void {
    sessionStorage.clear();
  }
}

src\app\shared\components\button\button.component.html
<button
  [disabled]="disabled"
  [type]="type"
  (click)="onClickButton($event)"
  class="button-component"
  [ngClass]="combinedClasses"
    nz-tooltip
    [nzTooltipPlacement]="tooltipPlacement"
    [nzTooltipOverlayClassName]="tooltipClassName"
  [nzTooltipTitle]="tooltipTitle | translate"
  [attr.aria-label]="ariaLabel"
  [attr.aria-disabled]="disabled"
>
  {{ name ? (name | translate) : '' }}
  <i *ngIf="icon" nz-icon [nzType]="icon"></i>
  <ng-content></ng-content>
</button>

src\app\shared\components\button\button.component.scss
$button-round-size-48: 48px;
$button-round-size-24: 24px;
$button-round-font-size-24: 24px;
$button-round-font-size-12: 12px;

:host {
  &::ng-deep {
    &.button-component {
      display: flex;
      align-items: center;
      justify-content: center;
      border: none;
      font-weight: bold;
      transition:
        background-color 0.3s ease-in-out,
        color 0.3s ease-in-out;
      color: var(--color-orange);
      font-size: 14px;
      font-family: var(--font-roboto);

      &:not(:disabled) {
        &:hover {
          outline: none;
          box-shadow: none;
        }

        &:focus {
          outline: none;
          box-shadow: none;
        }
      }

      &.default-button {
        padding: 8px 97px;
        border-radius: 14px;

        &:hover {
          outline: none;
        }

        &:focus {
          outline: none;
        }

        &-small {
          padding: 5px 3rem !important;
        }
      }

      &.round {
        background-color: transparent;
        border-radius: 50%;
        min-width: $button-round-size-24;
        min-height: $button-round-size-24;
        padding: 0;
        display: flex;
        align-items: center;
        box-shadow: 0 0 6px 0 var(--shadow-color) !important;

        i {
          font-size: $button-round-font-size-12;
        }

        &.s32 {
          min-width: $button-round-size-48 - 16;
          min-height: $button-round-size-48 - 16;

          i {
            font-size: $button-round-font-size-24 - 4;
          }
        }

        &.active,
        &:hover {
          background-color: var(--color-blue);
          color: var(--color-white);

          & i svg * {
            fill: currentcolor;
            stroke: currentcolor;
          }
        }
      }
    }
  }
}

@keyframes button-blinke-animate {
  from {
    opacity: 1;
  }

  to {
    opacity: 0.2;
  }
}

src\app\shared\components\button\button.component.ts
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { NzToolTipModule } from 'ng-zorro-antd/tooltip';
import { NzIconModule } from 'ng-zorro-antd/icon';

@Component({
  selector: 'app-button',
  standalone: true,
  imports: [CommonModule, TranslateModule, NzToolTipModule, NzIconModule],
  templateUrl: './button.component.html',
  styleUrls: ['./button.component.scss'],
})
export class ButtonComponent {
  @Input() id: string | number;
  @Input() name = '';
  @Input() icon = '';
  @Input() disabled = false;
  @Input() type = '';
  @Input() isRound = false;
  @Input() isActive = false;
  @Input() customClass: string | string[] = '';
  @Input() tooltipTitle: string = '';
  @Input() tooltipPlacement: 'top' | 'bottom' | 'left' | 'right' = 'top';
  @Input() tooltipClassName: 'tooltip-btn-top' | 'tooltip-btn-bottom';

  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter();
  @Output() btnClickId: EventEmitter<string | number> = new EventEmitter();

  onClickButton(event: MouseEvent, id?: string): void {
    this.btnClick.emit(event);
    this.btnClickId.emit(id ?? this.id ?? null);
  }

  get combinedClasses(): string {
    return ['default-button', ...[].concat(this.customClass || []), this.isRound ? 'round' : '', this.isActive ? 'active' : '']
      .filter(Boolean)
      .join(' ');
  }

  get ariaLabel(): string {
    return this.name || 'button';
  }
}

src\app\shared\components\button\button.model.ts
export interface IButton {
  onAction?: () => void;
  id?: string;
  name?: string;
  className?: string;
  customClass?: string;
  tooltipTitle?: string;
  tooltipClassName?: string;
  isRound?: boolean;
  icon?: string;
  ariaLabel?: string;
  disabled?: boolean;
}

src\app\shared\utils\utils.spec.ts
import { toCamelCase, safelyParseJSON } from './utils';

describe('Utils Tests', () => {
  describe('toCamelCase', () => {
    it('should convert text with spaces to camelCase', () => {
      expect(toCamelCase('hello world')).toBe('helloWorld');
    });
    it('should convert text with hyphens to camelCase', () => {
      expect(toCamelCase('hello-world')).toBe('helloWorld');
    });
    it('should convert text with underscores to camelCase', () => {
      expect(toCamelCase('hello_world')).toBe('helloWorld');
    });
    it('should convert text with dots to camelCase', () => {
      expect(toCamelCase('hello.world')).toBe('helloWorld');
    });
    it('should handle mixed delimiters correctly', () => {
      expect(toCamelCase('hello-world_test.text')).toBe('helloWorldTestText');
    });
    it('should return an empty string when input is empty', () => {
      expect(toCamelCase('')).toBe('');
    });
    it('should handle single character input', () => {
      expect(toCamelCase('a')).toBe('a');
    });
    it('should preserve camelCase for already camelCase text', () => {
      expect(toCamelCase('helloWorld')).toBe('helloWorld');
    });
  });

  describe('safelyParseJSON', () => {
    it('should parse valid JSON strings', () => {
      expect(safelyParseJSON('{"key": "value"}')).toEqual({ key: 'value' });
    });
    it('should return null for invalid JSON strings', () => {
      expect(safelyParseJSON('invalid-json')).toBeNull();
    });
    it('should handle empty strings', () => {
      expect(safelyParseJSON('')).toBeNull();
    });
    it('should parse JSON arrays', () => {
      expect(safelyParseJSON('[1, 2, 3]')).toEqual([1, 2, 3]);
    });
    it('should handle JSON with nested objects', () => {
      const jsonString = '{"key": {"nestedKey": "nestedValue"}}';
      expect(safelyParseJSON(jsonString)).toEqual({ key: { nestedKey: 'nestedValue' } });
    });
    it('should handle JSON with numbers', () => {
      expect(safelyParseJSON('123')).toBe(123);
    });
    it('should handle JSON with booleans', () => {
      expect(safelyParseJSON('true')).toBe(true);
    });
    it('should handle JSON with null values', () => {
      expect(safelyParseJSON('null')).toBe(null);
    });
  });
});

src\app\shared\utils\utils.ts
export function toCamelCase(text: string): string {
  const tmpText = text.replace(/[-_\s.]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));
  return tmpText.substring(0, 1).toLowerCase() + tmpText.substring(1);
}

export function safelyParseJSON(jsonString: string): any {
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    return null;
  }
}

src\assets\i18Local\en.json
{
  "common": {
    "buttons": {
      "prev": "Previous",
      "next": "Next",
      "replay": "Replay",
      "stop": "Stop"
    }
  }
}

src\assets\i18Local\en\menu.json
{}

src\assets\scss\_reset.scss
*,
*::before,
*::after {
  box-sizing: border-box;
}

@media (prefers-reduced-motion: no-preference) {
  :root {
    scroll-behavior: smooth;
  }
}

body {
  margin: 0;
}

hr {
  margin: 1rem 0;
  color: inherit;
  border: 0;
  opacity: 0.25;
}

h6,
h5,
h4,
h3,
h2,
h1 {
  margin-top: 0;
  margin-bottom: 0.5rem;
  font-weight: 500;
  line-height: 1.2;
}

h1 {
  font-size: calc(1.375rem + 1.5vw);
}

@media (width >= 1200px) {
  h1 {
    font-size: 2.5rem;
  }
}

h2 {
  font-size: calc(1.325rem + 0.9vw);
}

@media (width >= 1200px) {
  h2 {
    font-size: 2rem;
  }
}

h3 {
  font-size: calc(1.3rem + 0.6vw);
}

@media (width >= 1200px) {
  h3 {
    font-size: 1.75rem;
  }
}

h4 {
  font-size: calc(1.275rem + 0.3vw);
}

@media (width >= 1200px) {
  h4 {
    font-size: 1.5rem;
  }
}

h5 {
  font-size: 1.25rem;
}

h6 {
  font-size: 1rem;
}

p {
  margin-top: 0;
  margin-bottom: 1rem;
}

abbr[title] {
  text-decoration: underline dotted;
  cursor: help;
  text-decoration-skip-ink: none;
}

address {
  margin-bottom: 1rem;
  font-style: normal;
  line-height: inherit;
}

ol,
ul,
dl {
  margin: 0;
  padding: 0;
}

ol ol,
ul ul,
ol ul,
ul ol {
  margin-bottom: 0;
}

dt {
  font-weight: 700;
}

dd {
  margin-bottom: 0.5rem;
  margin-left: 0;
}

blockquote {
  margin: 0 0 1rem;
}

b,
strong {
  font-weight: bolder;
}

small {
  font-size: 0.875em;
}

mark {
  padding: 0.1875em;
}

sub,
sup {
  position: relative;
  font-size: 0.75em;
  line-height: 0;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

a {
  text-decoration: underline;
}

a:not([href], [class]),
a:not([href], [class]):hover {
  color: inherit;
  text-decoration: none;
}

pre,
code,
kbd,
samp {
  font-family: var(--bs-font-monospace);
  font-size: 1em;
}

pre {
  display: block;
  margin-top: 0;
  margin-bottom: 1rem;
  overflow: auto;
  font-size: 0.875em;
}

pre code {
  font-size: inherit;
  color: inherit;
  word-break: normal;
}

code {
  font-size: 0.875em;
  color: var(--bs-code-color);
  word-wrap: break-word;
}

a > code {
  color: inherit;
}

kbd {
  padding: 0.1875rem 0.375rem;
  font-size: 0.875em;
  color: var(--bs-body-bg);
  background-color: var(--bs-body-color);
  border-radius: 0.25rem;
}

kbd kbd {
  padding: 0;
  font-size: 1em;
}

figure {
  margin: 0 0 1rem;
}

img,
svg {
  vertical-align: middle;
}

table {
  caption-side: bottom;
  border-collapse: collapse;
}

caption {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  color: var(--bs-secondary-color);
  text-align: left;
}

th {
  text-align: inherit;
  text-align: -webkit-match-parent;
}

thead,
tbody,
tfoot,
tr,
td,
th {
  border-color: inherit;
  border-style: solid;
  border-width: 0;
}

label {
  display: inline-block;
}

button {
  border-radius: 0;
}

button:focus:not(:focus-visible) {
  outline: 0;
}

input,
button,
select,
optgroup,
textarea {
  margin: 0;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

button,
select {
  text-transform: none;
}

[role="button"] {
  cursor: pointer;
}

select {
  word-wrap: normal;
}

select:disabled {
  opacity: 1;
}

[list]:not([type="date"], [type="datetime-local"], [type="month"], [type="week"], [type="time"])::-webkit-calendar-picker-indicator {
  display: none !important;
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  appearance: button;
}

button:not(:disabled),
[type="button"]:not(:disabled),
[type="reset"]:not(:disabled),
[type="submit"]:not(:disabled) {
  cursor: pointer;
}

::-moz-focus-inner {
  padding: 0;
  border-style: none;
}

textarea {
  resize: vertical;
}

fieldset {
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0;
}

legend {
  float: left;
  width: 100%;
  padding: 0;
  margin-bottom: 0.5rem;
  font-size: calc(1.275rem + 0.3vw);
  line-height: inherit;
}

@media (width >= 1200px) {
  legend {
    font-size: 1.5rem;
  }
}

legend + * {
  clear: left;
}

::-webkit-datetime-edit-fields-wrapper,
::-webkit-datetime-edit-text,
::-webkit-datetime-edit-minute,
::-webkit-datetime-edit-hour-field,
::-webkit-datetime-edit-day-field,
::-webkit-datetime-edit-month-field,
::-webkit-datetime-edit-year-field {
  padding: 0;
}

::-webkit-inner-spin-button {
  height: auto;
}

[type="search"] {
  appearance: textfield;
  outline-offset: -2px;
}

::-webkit-search-decoration {
  appearance: none;
}

::-webkit-color-swatch-wrapper {
  padding: 0;
}

::-webkit-file-upload-button {
  font: inherit;
  appearance: button;
}

::file-selector-button {
  font: inherit;
  appearance: button;
}

output {
  display: inline-block;
}

iframe {
  border: 0;
}

summary {
  display: list-item;
  cursor: pointer;
}

progress {
  vertical-align: baseline;
}

[hidden] {
  display: none !important;
}

src\assets\scss\_variables.scss
:root {
  --color-white: #fff;
  --color-white-sheer: rgb(255 255 255 / 90%);
  --color-blue: #0834c4;
  --color-orange: #eb6e4b;
  --color-green: #0f0;
  --color-primary: #48484a;
  --color-red: #f00;
  --color-grey: #f7f7f7;
  --color-light-grey: #f9f9f9;
  --font-roboto: "Roboto", sans-serif;
  --shadow-color: #04040421;
}

src\assets\scss\layout\_index.scss
@import "./layout";
@import "./tooltip";

src\assets\scss\layout\_layout.scss
html {
  font-weight: 400;
  text-rendering: optimizelegibility;
  -webkit-font-smoothing: antialiased;
}

body {
  font-family: var(--font-roboto);
  font-feature-settings: normal;
  -moz-osx-font-smoothing: grayscale !important;
  -webkit-font-smoothing: subpixel-antialiased !important;
  color: var(--color-primary);
  font-size: 16px;
  overflow-x: hidden;
}

a {
  text-decoration: none;
}

// .custom-tooltip {
//   position: fixed;
//   z-index: 1000;
//   background: #333;
//   color: #fff;
//   padding: 5px 10px;
//   border-radius: 4px;
//   pointer-events: none;
//   opacity: 0;
//   transition: opacity 0.2s ease-in-out;
// }

src\assets\scss\layout\_tooltip.scss
@import "@angular/cdk/overlay-prebuilt.css";

%tooltip-transparent {
  .ant-tooltip-inner {
    padding: 2px 6px;
    border: 0;
    outline: 0;
    border-radius: 5px;
    background-color: var(--color-light-grey);
    box-shadow: none;
    color: var(--color-blue);
    text-align: center;
    font-weight: 400;
    font-size: 10px;
    min-height: initial !important;
    line-height: 1 !important;
    font-family: var(--font-roboto);
  }

  .ant-tooltip-arrow {
    display: none !important;

    &::before {
      content: none;
    }
  }
}

$max-z-index: 2147483647;

.ant-tooltip {
  z-index: $max-z-index !important;
  max-width: 160px;
  animation: scale-animation 0.1s alternate ease;
  font-family: var(--font-roboto);

  &.tooltip-btn,
  &.tooltip-btn-top,
  &.tooltip-btn-bottom {
    @extend %tooltip-transparent;

    .ant-tooltip-inner {
      font-size: 13px;
    }
  }

  &.tooltip-btn {
    padding-top: 6px;
  }

  &.tooltip-btn-top {
    padding-bottom: 6px;
  }

  &.tooltip-btn-bottom {
    padding-bottom: 6px;
  }
}

@keyframes scale-animation {
  from {
    transform: scale(0.5);
  }

  to {
    transform: scale(1);
  }
}

src\environments\build-environment.ts
const buildEnvironment = {
  production: true,
  version: '1.0.0',
  buildTimestamp: '2024-11-19T10:06:37.856Z',
};

export default buildEnvironment;

src\environments\environment.ts
export const environment = {
  production: false,
  SERVER_BASE_URL: 'https://localhost:4200',
  SERVER_API_URL: 'https://localhost:4200/api',
};

